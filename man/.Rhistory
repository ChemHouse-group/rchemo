n <- 10 ; p <- 10
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
m <- 2
#m <- 1
Xtest <- matrix(rnorm(m * p), ncol = p)
colnames(Xtest) <- paste("v", 1:p, sep = "")
Xtrain
Xtest
blocks <- list(1:2, 4, 6:8)
zXtrain <- mblocks(Xtrain, blocks = blocks)
zXtest <- mblocks(Xtest, blocks = blocks)
zXtrain
blockscal(zXtrain, zXtest)
res <- blockscal(zXtrain, zXtest)
names(res)
1.1968746/1.046674
1.1968746/sqrt(1.046674)
0.7486886
1.1968746*0.7486886
zXtrain[[1]]/1.046674
1.1968746/1.598628
zXtrain
?scale
blocks <- list(1:2, 4, 6:8)
X1 <- mblocks(Xtrain, blocks = blocks)
X2 <- mblocks(Xtest, blocks = blocks)
res <- blockscal(X1, X2)
zXtrain <- hconcat(res$Xtrain)
names(zXtrain)
zXtrain
X1
is.matrix(zXtrain)
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 3
plskern(Xtrain, Ytrain, nlv = nlv)
?predict.Plsr
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 3
fm <- plskern(Xtrain, Ytrain, nlv = nlv)
pred <- predict(fm, Xtest)$pred
residreg(pred, Ytest)
Ytest
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 3
plskern(Xtrain, ytrain, nlv = nlv)
pred <- predict(fm, Xtest)$pred
pred
ytrain
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 3
fm <- plskern(Xtrain, ytrain, nlv = nlv)
pred <- predict(fm, Xtest)$pred
pred
residreg(pred, ytest)
msep(pred, Ytest)
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 3
fm <- plskern(Xtrain, Ytrain, nlv = nlv)
pred <- predict(fm, Xtest)$pred
residreg(pred, Ytest)
msep(pred, Ytest)
rmsep(pred, Ytest)
sep(pred, Ytest)
bias(pred, Ytest)
cor2(pred, Ytest)
r2(pred, Ytest)
rpd(pred, Ytest)
rpdr(pred, Ytest)
mse(pred, Ytest, digits = 3)
residcla(pred, Y)
residcla(pred, Ytest)
err(pred, Ytest)
?plsda
n <- 50 ; p <- 8
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- sample(c(1, 4, 10), size = n, replace = TRUE)
Xtest <- Xtrain[1:5, ]
ytest <- ytrain[1:5]
nlv <- 5
fm <- plsrda(Xtrain, ytrain, nlv = nlv)
pred <- predict(fm, Xtest)$pred
residcla(pred, ytest)
err(pred, ytest)
z <- ozone$X
View(z)
X <- z[, -4]
y <- z[, 4]
dim(X)
headm(X)
Xtest <- X[1:2, ]
ytest <- y[1:2]
nlv <- 10
fm <- cglsr(X, y, nlv = nlv)
fm
X <- z[u, -4]
z <- ozone$X
u <- which(!is.na(rowSums(z)))
X <- z[u, -4]
y <- z[u, 4]
dim(X)
headm(X)
Xtest <- X[1:2, ]
ytest <- y[1:2]
nlv <- 10
fm <- cglsr(X, y, nlv = nlv)
fm
names(fm)
apply(X, MARGIN = 2, FUN = mean)
coef(fm)
coef(fm)
coef(fm, nlv = 1)
predict(fm, Xtest)
predict(fm, Xtest, nlv = 1:3)
is.list(predict(fm, Xtest))
is.list(predict(fm, Xtest))$pred
is.list(predict(fm, Xtest))[["pred"]]
is.list(predict(fm, Xtest))[["lv1"]]
is.list(predict(fm, Xtest)[["pred"]])
is.matrix(predict(fm, Xtest)$pred$lv1)
is.matrix(predict(fm, Xtest)[["pred"]]$lv1)
predict(fm, Xtest)$pred
predict(fm, Xtest)$pred$lv1
predict(fm, Xtest)$pred[["lv1"]]
predict(fm, Xtest)$pred[1]
predict(fm, Xtest, nlv = 1:3)$pred$lv1
is.matrix(predict(fm, Xtest, nlv = 1:3)$pred$lv1)
fm
dim(fm)
dim(fm$B)
coef(fm)
coef(fm, nlv=1:3)
coef(fm, nlv=3)
coef(fm, nlv=3)
coef(fm, nlv=2)
coef(fm, nlv=10)
coef(fm, nlv=1)
is.matrix(coef(fm, nlv=3))
is.matrix(coef(fm, nlv=3)$B)
X1 <- matrix(c(1:5, 1:5, c(1, 2, 7, 4, 8)), nrow = 3, byrow = TRUE)
dimnames(X1) <- list(1:3, c("v1", "v2", "v3", "v4", "v5"))
X2 <- matrix(c(6:10, 1:5, c(1, 2, 7, 6, 12)), nrow = 3, byrow = TRUE)
dimnames(X2) <- list(1:3, c("v1", "v2", "v3", "v4", "v5"))
X1
X2
checkdupl(X1, X2)
is.matrix(checkdupl(X1, X2))
is.data.frame(checkdupl(X1, X2))
X <- data.frame(
v1 = c(NA, rnorm(9)),
v2 = c(NA, rnorm(8), NA),
v3 = c(NA, NA, NA, rnorm(7))
)
is.data.frame(X)
is.matrix(X)
X <- as.matrix(X)
X
checkna(X)
n <- 6 ; p <- 4
X <- matrix(rnorm(n * p), ncol = p)
Y <- matrix(rnorm(n * 2), ncol = 2)
covsel(X, Y, nvar = 3)
data(cassav)
X <- cassav$Xtest
n <- 15
Xp_derivate1 <- dderiv(X, n = n)
Xp_derivate2 <- dderiv(dderiv(X, n), n)
oldpar <- par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
plotsp(X, main = "Signal")
plotsp(Xp_derivate1, main = "Corrected signal")
abline(h = 0, lty = 2, col = "grey")
par(oldpar)
oldpar <- par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
plotsp(X, main = "Signal")
plotsp(Xp_derivate2, main = "Corrected signal")
abline(h = 0, lty = 2, col = "grey")
par(oldpar)
Xp_derivate1
View(Xp_derivate1)
## The example below reproduces the numerical illustration
## given by Kramer & Sugiyama 2011 on the Ozone data (Fig. 1, center).
## Function "pls.model" used for df calculations
## in the R package "plsdof" v0.2-9 (Kramer & Braun 2019)
## automatically scales the X matrix before PLS.
## The example scales also X for consistency when using the other functions.
data(ozone)
z <- ozone$X
u <- which(!is.na(rowSums(z)))    ## Removing rows with NAs
X <- z[u, -4]
y <- z[u, 4]
dim(X)
Xs <- scale(X)    ## Scaling only for consistency with plsdof
###### CGLS estimations
nlv <- 12
res <- dfplsr_cg(Xs, y, nlv = nlv)
#library(plsdof)
#fm <- pls.model(
#  Xr, yr, m = nlv, compute.DoF = TRUE,
#  compute.jacobian = FALSE,                   ## Krylov
#  use.kernel = FALSE
#  )
#df.kramer <- fm$DoF
df.kramer <- c(1.000000, 3.712373, 6.456417, 11.633565, 12.156760, 11.715101, 12.349716,
12.192682, 13.000000, 13.000000, 13.000000, 13.000000, 13.000000)
znlv <- 0:nlv
plot(znlv, res$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, znlv + 1, col = "grey40")   ## Naive df
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
data(ozone)
z <- ozone$X
X <- z[, -4]
y <- z[, 4]
dim(X)
Xs <- scale(X)    ## Scaling only for consistency with plsdof
###### CGLS estimations
nlv <- 12
res <- dfplsr_cg(Xs, y, nlv = nlv)
?legend
legend("bottomright", legend=c("dfplsr_cg","Naive df","df.kramer"), col=c("red","grey40","black"),
lty=c("1","1","0"), pch=c(NA,NA,16))
plot(znlv, res$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, znlv + 1, col = "grey40")   ## Naive df
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
legend("bottomright", legend=c("dfplsr_cg","Naive df","df.kramer"), col=c("red","grey40","black"),
lty=c("1","1","0"), pch=c(NA,NA,16), bty="n")
legend("bottomright", legend=c("dfplsr_cg","Naive df","df.kramer"), col=c("red","grey40","black"),
lty=c(1,1,0), pch=c(NA,NA,16), bty="n")
data(ozone)
z <- ozone$X
u <- which(!is.na(rowSums(z)))
X <- z[u, -4]
y <- z[u, 4]
dim(X)
Xs <- scale(X)
nlv <- 12
B <- 50
u <- dfplsr_cov(Xs, y, nlv = nlv, B = B)
v <- dfplsr_div(Xs, y, nlv = nlv, B = B)
df.kramer <- c(1.000000, 3.712373, 6.456417, 11.633565, 12.156760, 11.715101, 12.349716,
12.192682, 13.000000, 13.000000, 13.000000, 13.000000, 13.000000)
znlv <- 0:nlv
plot(znlv, u$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, v$df, col = "blue")
lines(znlv, znlv + 1, col = "grey40")   ## Naive df
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
legend("bottomright", legend=c("dfplsr_div","Naive df","df.kramer"), col=c("red","grey40","black"),
lty=c(1,1,0), pch=c(NA,NA,16), bty="n")
data(ozone)
z <- ozone$X
u <- which(!is.na(rowSums(z)))
X <- z[u, -4]
y <- z[u, 4]
dim(X)
Xs <- scale(X)
nlv <- 12
B <- 50
u <- dfplsr_cov(Xs, y, nlv = nlv, B = B)
v <- dfplsr_div(Xs, y, nlv = nlv, B = B)
df.kramer <- c(1.000000, 3.712373, 6.456417, 11.633565, 12.156760, 11.715101, 12.349716,
12.192682, 13.000000, 13.000000, 13.000000, 13.000000, 13.000000)
znlv <- 0:nlv
znlv <- 0:nlv
plot(znlv, u$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, v$df, col = "blue")
lines(znlv, znlv + 1, col = "grey40")   ## Naive df
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
legend("bottomright", legend=c("dfplsr_cov","dfplsr_div","Naive df","df.kramer"), col=c("blue","red","grey40","black"),
lty=c(1,1,1,0), pch=c(NA,NA,NA,16), bty="n")
data(ozone)
z <- ozone$X
u <- which(!is.na(rowSums(z)))
X <- z[u, -4]
y <- z[u, 4]
dim(X)
Xs <- scale(X)
nlv <- 12
res <- dfplsr_cg(Xs, y, nlv = nlv)
df.kramer <- c(1.000000, 3.712373, 6.456417, 11.633565, 12.156760, 11.715101, 12.349716,
12.192682, 13.000000, 13.000000, 13.000000, 13.000000, 13.000000)
znlv <- 0:nlv
plot(znlv, res$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, znlv + 1, col = "grey40")
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
legend("bottomright", legend=c("dfplsr_cg","Naive df","df.kramer"), col=c("red","grey40","black"),
lty=c(1,1,0), pch=c(NA,NA,16), bty="n")
res
data(ozone)
z <- ozone$X
u <- which(!is.na(rowSums(z)))
X <- z[u, -4]
y <- z[u, 4]
dim(X)
Xs <- scale(X)
nlv <- 12
B <- 50
u <- dfplsr_cov(Xs, y, nlv = nlv, B = B)
v <- dfplsr_div(Xs, y, nlv = nlv, B = B)
df.kramer <- c(1.000000, 3.712373, 6.456417, 11.633565, 12.156760, 11.715101, 12.349716,
12.192682, 13.000000, 13.000000, 13.000000, 13.000000, 13.000000)
znlv <- 0:nlv
plot(znlv, u$df, type = "l", col = "red",
ylim = c(0, 15),
xlab = "Nb components", ylab = "df")
lines(znlv, v$df, col = "blue")
lines(znlv, znlv + 1, col = "grey40")   ## Naive df
points(znlv, df.kramer, pch = 16)
abline(h = 1, lty = 2, col = "grey")
legend("bottomright", legend=c("dfplsr_cov","dfplsr_div","Naive df","df.kramer"), col=c("blue","red","grey40","black"),
lty=c(1,1,1,0), pch=c(NA,NA,NA,16), bty="n")
u
v
?kern
?gamma
?krbf
n <- 6 ; p <- 4
Xtrain <- matrix(rnorm(n * p), ncol = p)
ytrain <- rnorm(n)
Ytrain <- cbind(y1 = ytrain, y2 = 100 * ytrain)
m <- 3
Xtest <- Xtrain[1:m, , drop = FALSE]
Ytest <- Ytrain[1:m, , drop = FALSE] ; ytest <- Ytest[1:m, 1]
nlv <- 2
fm <- dkplsr(Xtrain, Ytrain, nlv = nlv, kern = "krbf", gamma = .8)
transform(fm, Xtest)
transform(fm, Xtest, nlv = 1)
coef(fm)
coef(fm, nlv = 1)
predict(fm, Xtest)
predict(fm, Xtest, nlv = 0:nlv)$pred
pred <- predict(fm, Xtest)$pred
msep(pred, Ytest)
nlv <- 2
fm <- dkplsr(Xtrain, Ytrain, nlv = nlv, kern = "kpol", degree = 2, coef0 = 10)
predict(fm, Xtest, nlv = nlv)
x <- seq(-10, 10, by = .2)
x[x == 0] <- 1e-5
n <- length(x)
zy <- sin(abs(x)) / abs(x)
y <- zy + rnorm(n, 0, .2)
plot(x, y, type = "p")
lines(x, zy, lty = 2)
X <- matrix(x, ncol = 1)
nlv <- 3
fm <- dkplsr(X, y, nlv = nlv)
pred <- predict(fm, X)$pred
plot(X, y, type = "p")
lines(X, zy, lty = 2)
lines(X, pred, col = "red")
